/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef server_TYPES_H
#define server_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace urlserver {

typedef struct _resp__isset {
  _resp__isset() : doc(false), access_count(false), miss_count(false) {}
  bool doc;
  bool access_count;
  bool miss_count;
} _resp__isset;

class resp {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  resp() : doc(), access_count(0), miss_count(0) {
  }

  virtual ~resp() throw() {}

  std::string doc;
  int32_t access_count;
  int32_t miss_count;

  _resp__isset __isset;

  void __set_doc(const std::string& val) {
    doc = val;
  }

  void __set_access_count(const int32_t val) {
    access_count = val;
  }

  void __set_miss_count(const int32_t val) {
    miss_count = val;
  }

  bool operator == (const resp & rhs) const
  {
    if (!(doc == rhs.doc))
      return false;
    if (!(access_count == rhs.access_count))
      return false;
    if (!(miss_count == rhs.miss_count))
      return false;
    return true;
  }
  bool operator != (const resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(resp &a, resp &b);

} // namespace

#endif
